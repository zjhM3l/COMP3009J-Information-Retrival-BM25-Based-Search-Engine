[ source navigation ] [ identifier search ]
14 // 15 // For more information see the Mersenne Twistor homepage 16 // http://www.math.keio.ac.jp/~matumoto/emt.html 17 // 18 // Advantage: large period 2**19937-1 19 // relativly fast 20 // (only two times slower than TRandom, but 21 // two times faster than TRandom2) 22 // Drawback: a relative large internal state of 624 integers 23 // 24 // 25 // Aug.99 ROOT implementation based on CLHEP by P.Malzacher 26 // 27 // the original code contains the following copyright notice: 28 /* This library is free software; you can redistribute it and/or */ 29 /* modify it under the terms of the GNU Library General Public */ 30 /* License as published by the Free Software Foundation; either */ 31 /* version 2 of the License, or (at your option) any later */ 32 /* version.
*/ 33 /* This library is distributed in the hope that it will be useful, */ 34 /* but WITHOUT ANY WARRANTY; without even the implied warranty of */ 35 /* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. */ 36 /* See the GNU Library General Public License for more details. */ 37 /* You should have received a copy of the GNU Library General */ 38 /* Public License along with this library; if not, write to the */ 39 /* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA */ 40 /* 02111-1307 USA */ 41 /* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura. */ 42 /* When you use this, send an email to: matumoto@math.keio.ac.jp */ 43 /* with an appropriate reference to your work.
*/ 44 ///////////////////////////////////////////////////////////////////// 45 46 #include "TRandom3.h" 47 #include "TClass.h" 48 #include "TMath.h" 49 50 ClassImp(TRandom3) 51 52 //__________________________________________________________________________ ____ 53 TRandom3::TRandom3(UInt_t seed) 54 { 55 //*-*-*-*-*-*-*-*-*-*-*default constructor*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 56 //*-* =================== 57 58 SetName("Random3"); 59 SetTitle("Random number generator: Mersenne Twistor"); 60 SetSeed(seed); 61 } 62 63 //__________________________________________________________________________ ____ 64 TRandom3::~TRandom3() 65 { 66 //*-*-*-*-*-*-*-*-*-*-*default destructor*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 67 //*-* ================== 68 69 } 70 71 //__________________________________________________________________________ ____ 72 Double_t TRandom3::Rndm(Int_t) 73 { 74 // Machine independent random number generator.
75 // Produces uniformly-distributed floating points in [0,1] 76 // Method: Mersenne Twistor 77 78 UInt_t y; 79 80 const Int_t kM = 397; 81 const Int_t kN = 624; 82 const UInt_t kTemperingMaskB = 0x9d2c5680; 83 const UInt_t kTemperingMaskC = 0xefc60000; 84 const UInt_t kUpperMask = 0x80000000; 85 const UInt_t kLowerMask = 0x7fffffff; 86 const UInt_t kMatrixA = 0x9908b0df; 87 88 if (fCount624 
150 151 if (R__b.IsReading()) { 152 UInt_t R__s, R__c; 153 Version_t R__v = R__b.ReadVersion(
[ source navigation ] [ identifier search ]
This page was automatically generated by the LXR engine.
Visit the LXR main site for more information.
This version by Torre Wenaus.
